---
title: "Slashing AWS RDS costs for a database instance in an enterprise context"
date: 2022-05-03T18:28:22+02:00
draft: true
---

# A step by step guide on how to reduce costs for an RDS instance
This post will provide a step by step guide on how to reduce costs for AWS RDS.
It will discuss some obvious and some lesser-known cost savings that can be applied on AWS RDS instances.
Most cost savings come with some tradeoffs to consider.  The tradeoffs are discussed and some context is given on when you should or should not apply the cost saving.
These considerations are then applied on a real MySQL RDS instance that is primarily used during extended business hours with some batch operations occurring at night.

Finally, an overview of all the cost savings is presented for the MySQL RDS instance.
# What is AWS RDS
AWS RDS is AWS's implementation of a relational database service.
It supports Amazon Aurora, MySQL, MariaDB, Oracle, SQL Server, and PostgreSQL database engines.
If you want to have a relational database and do not want to worry about its maintenance, durability, disaster recovery and high availability then consider using this service.


# Cost Savings
## AWS RDS
The best way to reduce AWS RDS costs is by not using it at all!
A relational database can be hosted perfectly on EC2 and will cost you approximately 50% less.
If you do not care much about high availability, disaster recovery, security or performance then this is definitely the way to go.
Most businesses however do care so I would not consider this a viable option anymore in 2022 except for maybe a pet project.

## Database instance class

When starting with AWS RDS consider which instance class you want to use.
Consider the burstable performance class (the t instances), when you have a non constant workload over 24 hours. For example when the database is almost exclusively used during the day.
Consider the memory optimized class ( R,x and z instances) when you have a read heavy database workload.
Consider the general purpose class for other workloads.

### real life use case
Initially a general purpose instance was chosen for the relational database.
However, given the fact that the database is primarily used during extended business hours, the burstable performance class was chosen.
Changing the instance class will lead to some downtime so schedule it properly.

## database instance class type
Choosing the right database instance class type is paramount in reducing AWS RDS costs.
it is best to start off with a bigger instance class type if you are not quite sure how much Memory or CPU will be necessary.
Once a baseline has been established you can consider scaling down the instance class type vertically.
In order to confidently scale down the instance class type, check both CPU and Freeable memory metrics.
Do not scale down when the maximum of the CPU metric exceeds 60% regularly or when the currently used memory (instance class type memory minus freeable memory) is more than 95% of the memory of the targetted scaled down database instance class type.
In all other cases you can try scaling down vertically to an instance class type with less memory and less VCPU's.

### real life use case
At the time of writing an RDS instance is running with sometimes only 3% free memory[2]. This is less than what is advised by AWS (https://aws.amazon.com/premiumsupport/knowledge-center/low-freeable-memory-rds-mysql-mariadb/).
The Swap Usage metric increases regularly, so scaling up vertically seems reasonable.
However since there is no visible impact on the write latency, read latency nor on the CPU, it is a calculated risk which reduces costs significantly.
Keep in mind that downscaling one instance size reduces the cost by a factor 2. Choosing to not scale up one instance size in this case saves a considerable amount of money.
It is very much recommended to have some CloudWatch alarms in place, should the read or write latency exceed a certain arbitrary threshold.

## multi-AZ 
RDS instances can be run with multi AZ availability. Choose this option if your database needs to be high available. It will protect you from Hardware failure and from an availability zone going down as a whole.
Having your RDS instance run with multi AZ availability provides faster recovery, since failover is a breeze. 
Consider disabling multi AZ when faster recovery is unnecessary which is the case for most test environments.
Running the test RDS instance in single AZ availability will cut its compute and storage cost in half.

### real life use case
The RDS instances in our test environment run in single AZ availability because the impact of having an RDS instance fail is limited.
The MySQL RDS instances that run in production have been deployed multi AZ as the cost of downtime is rather large. 


## Stopping unused RDS instances versus Reserved Instances
More costs can be saved by either stopping RDS instances during periods in which they are not used but this has to be carefully compared to reserving instances.
### unused RDS instances
Look at the usage patterns of your RDS instances. If the database is only used during business hours or extended business hours, consider stopping the RDS instance when it is not used to save on compute costs.
This can be done by triggering an AWS Lambda Function at certain times.
AWS will still charge you for the allocated storage of the RDS instance, but you will not have to pay for the compute part of the RDS instance costs.
If your RDS instances is only used 5 days a week from 9AM until 5 PM then you can stop the RDS instance down at 5PM and start it again at 9AM on weekdays.
The RDS instance will only be used 5*8 hours a week, which is about 24% of the time so you can save approximately 76% on RDS compute costs.



### Reserved instances
Once you have decided upon which instance class to use, you should look into reserved instances for AWS RDS.
Reserved instances allows you to save up to almost 70% of your costs compared to the on-demand rate.
The cost saving is heavily class type dependent. 

### Which option do I choose
Pick the option with the largest cost saving.
If both are approximately equal consider whether you are sure that you will need the RDS instance for the reserved amount of time, if there is doubt, then choose stopping and starting instances.

### real life use case
We do not stop unused RDS instance since both on our test and on our production environment, the database is used from 6AM up until 2AM, while also having some batch operations running between 2AM and 6AM.
Quite evidently we chose to reserve our RDS instances.
In our particular case we were running multiple instance types of the RDS t4g class. Since we cannot quite confidently predict the workload on our database for the coming year, we chose to reserve our RDS instances with partial upfront payment, leading to a cost reduction of approximately 37% (see Reserved Instances on https://aws.amazon.com/rds/mysql/pricing/).

### Size flexibility
Bear in mind that you can also make use of the size flexibility.
If you are sure about the chosen RDS instance class and the minimum instance type you need, then go ahead and reserve the minimum instance type already.
The size flexibility will allow two reserved RDS instances to count as one reserved RDS instance of one instance type higher.
The following scenario might this more clear. 
Suppose you currently have an rds.t4g.medium database running in a single AZ.
You do not know whether the database workload will increase in the coming months, but you are sure that it will not decrease.
It might be possible that the database needs to be deployed Multi-AZ in the coming months.
In this case, choose to reserve one rds.t4g.medium single AZ instance already.
If at some point in time you need to scale up to an rds.t4g.large single AZ instance, you can simply reserve another rds.t4g.medium single AZ instance. 
One reserved rds.t4g.large single AZ instance counts as two reserved rds.t4g.medium single AZ instances.
For multi AZ the same trick applies. One reserved multi AZ rds.t4g.medium instance counts as two reserved single AZ rds.t4g.medium instances.

## Allocated storage
Saving costs on allocated storage is a bit more tricky, since 
### storage types
There are two storage types for RDS instances:
- gp2
- io1

gp2 is great for variable workloads, while io1 works better for more constant workloads or for RDS instances that will need a high amount of IOPS.

#### IOPS
GP2 will give you a BurstBalance that can be used 
If you have a variable workload 


###### footnotes
<sup>2</sup>: The Freeable Memory metric is not always accurate, consider using enhanced monitoring's Free Memory metric when The Freeable Memory drops below 15% of the configured memory of the RDS instance or when the Swap Usage metric increases regularly. 

#todo use the 